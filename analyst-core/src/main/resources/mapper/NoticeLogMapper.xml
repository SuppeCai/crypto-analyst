<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.bl0ckchain.analyst.core.mapper.NoticeLogMapper">
  <resultMap id="BaseResultMap" type="me.bl0ckchain.analyst.core.entity.NoticeLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="exchange_id" jdbcType="BIGINT" property="exchangeId" />
    <result column="asset_pair_id" jdbcType="BIGINT" property="assetPairId" />
    <result column="period_id" jdbcType="BIGINT" property="periodId" />
    <result column="strategy_id" jdbcType="BIGINT" property="strategyId" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="notify_at" jdbcType="BIGINT" property="notifyAt" />
    <result column="create_at" jdbcType="BIGINT" property="createAt" />
    <result column="update_at" jdbcType="BIGINT" property="updateAt" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, exchange_id, asset_pair_id, period_id, strategy_id, description, notify_at, create_at, update_at,
    status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from a_notice_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from a_notice_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="me.bl0ckchain.analyst.core.entity.NoticeLog">
    insert into a_notice_log (id, exchange_id, asset_pair_id, 
      period_id, strategy_id, description, notify_at,
      create_at, update_at, status
      )
    values (#{id,jdbcType=BIGINT}, #{exchangeId,jdbcType=BIGINT}, #{assetPairId,jdbcType=BIGINT},
      #{periodId,jdbcType=BIGINT}, #{strategyId,jdbcType=BIGINT}, #{description,jdbcType=VARCHAR}, #{notifyAt,jdbcType=BIGINT},
      #{createAt,jdbcType=BIGINT}, #{updateAt,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="me.bl0ckchain.analyst.core.entity.NoticeLog">
    insert into a_notice_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="exchangeId != null">
        exchange_id,
      </if>
      <if test="assetPairId != null">
        asset_pair_id,
      </if>
      <if test="periodId != null">
        period_id,
      </if>
      <if test="strategyId != null">
        strategy_id,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="notifyAt != null">
        notify_at,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="exchangeId != null">
        #{exchangeId,jdbcType=BIGINT},
      </if>
      <if test="assetPairId != null">
        #{assetPairId,jdbcType=BIGINT},
      </if>
      <if test="periodId != null">
        #{periodId,jdbcType=BIGINT},
      </if>
      <if test="strategyId != null">
        #{strategyId,jdbcType=BIGINT},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="notifyAt != null">
        #{notifyAt,jdbcType=BIGINT},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=BIGINT},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="me.bl0ckchain.analyst.core.entity.NoticeLog">
    update a_notice_log
    <set>
      <if test="exchangeId != null">
        exchange_id = #{exchangeId,jdbcType=BIGINT},
      </if>
      <if test="assetPairId != null">
        asset_pair_id = #{assetPairId,jdbcType=BIGINT},
      </if>
      <if test="periodId != null">
        period_id = #{periodId,jdbcType=BIGINT},
      </if>
      <if test="strategyId != null">
        strategy_id = #{strategyId,jdbcType=BIGINT},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="notifyAt != null">
        notify_at,
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=BIGINT},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="me.bl0ckchain.analyst.core.entity.NoticeLog">
    update a_notice_log
    set exchange_id = #{exchangeId,jdbcType=BIGINT},
      asset_pair_id = #{assetPairId,jdbcType=BIGINT},
      period_id = #{periodId,jdbcType=BIGINT},
      strategy_id = #{strategyId,jdbcType=BIGINT},
      description = #{description,jdbcType=VARCHAR},
      notify_at = #{notifyAt,jdbcType=BIGINT},
      create_at = #{createAt,jdbcType=BIGINT},
      update_at = #{updateAt,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKeys" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from a_notice_log
    <if test="ids != null">
      where id in
      <foreach collection="ids" item="id" index="index"
               open="(" close=")" separator=",">
        #{id}
      </foreach>
    </if>
  </select>

  <select id="findByQuery" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from a_notice_log
    where 1=1
    <if test="startAt!=null">
      and notify_at &gt;=  #{startAt}
    </if>
    <if test="endAt!=null">
      and notify_at &lt; #{endAt}
    </if>
    <if test="assetPairId!=null">
      and asset_pair_id = #{assetPairId}
    </if>
    order by notify_at desc
  </select>

  <select id="findLatestByQuery" resultMap="BaseResultMap">
    select
    *
    from a_notice_log nl,
    (
      select l.asset_pair_id, l.period_id, l.strategy_id, MAX(l.notify_at) as latest_notify_at
      from a_notice_log l
      where 1=1
      <if test="assetPairId!=null">
        and l.asset_pair_id = #{assetPairId}
      </if>
      <if test="startAt!=null">
        and l.notify_at &gt;=  #{startAt}
      </if>
      <if test="endAt!=null">
        and l.notify_at &lt; #{endAt}
      </if>
      GROUP BY l.asset_pair_id, l.period_id, l.strategy_id
    ) as ll
    where nl.asset_pair_id = ll.asset_pair_id
    and nl.period_id = ll.period_id
    and nl.strategy_id = ll.strategy_id
    and nl.notify_at = ll.latest_notify_at
    order by nl.notify_at desc;
  </select>
</mapper>